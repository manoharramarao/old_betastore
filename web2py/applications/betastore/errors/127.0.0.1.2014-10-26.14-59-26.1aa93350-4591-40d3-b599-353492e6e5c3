(dp1
S'output'
p2
S'<type \'exceptions.RuntimeError\'> Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/manohar/work/bisineer_store/web2py/gluon/dal.py", line 8038, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/manohar/work/bisineer_store/web2py/gluon/dal.py", line 700, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/home/manohar/work/bisineer_store/web2py/gluon/dal.py", line 5005, in __init__\n    self.types.update({\'boolean\': ndb.BooleanProperty,\nNameError: global name \'ndb\' is not defined\n'
p3
sS'layer'
p4
S'/home/manohar/work/bisineer_store/web2py/applications/betastore/models/db.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n#from gluon.contrib.gql import GQLDB\n#db=GQLDB()\n# if not request.env.web2py_runtime_gae:\n#     ## if NOT running on Google App Engine use SQLite or other DB\n#     db = DAL('sqlite://storage.sqlite',pool_size=1,check_reserved=['all'])\n# else:\n    ## connect to Google BigTable (optional 'google:datastore://namespace')\ndb = DAL('google:datastore+ndb')\n    ## store sessions and tickets there\nsession.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be 'controller/function.extension'\n#response.generic_patterns = ['*'] if request.is_local else []\nresponse.generic_patterns = ['json']\n\n## (optional) optimize handling of static files\n# response.optimize_css = 'concat,minify,inline'\n# response.optimize_js = 'concat,minify,inline'\n## (optional) static assets folder versioning\n# response.static_version = '0.0.0'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Service, PluginManager\n\nauth = Auth(db)\nservice = Service()\nplugins = PluginManager()\n\n# edited by bisineer team\nauth.settings.extra_fields['auth_user'] = [\n    #Field('phone_number', requires=IS_MATCH('\\d{2}\\-\\d{2}\\-\\d{2}\\-\\d{4}')),\n    Field('phone_number', 'string')\n]\nauth.define_tables()\n# TODO add secure=True to the above argument so that login is done only on https\n\n## create all tables needed by auth if not custom tables\n#auth.define_tables(username=False, signature=False)\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = 'logging' if request.is_local else 'smtp.gmail.com:587'\nmail.settings.sender = 'you@gmail.com'\nmail.settings.login = 'username:password'\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, write your domain:api_key in private/janrain.key\nfrom gluon.contrib.login_methods.janrain_account import use_janrain\nuse_janrain(auth, filename='private/janrain.key')\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table('mytable',Field('myfield','string'))\n##\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\n\ndb.define_table(\n    'catalog',\n    Field('name'),\n    Field('description'),\n    format='%(name)s'\n)\n\n# category table\ndb.define_table(\n    'category',\n    Field('name'),\n    Field('description'),\n    Field('catalogs', 'list:string', default='default')\n)\n\n# product table\ndb.define_table(\n    'product',\n    Field('categories', 'list:string'),\n    Field('name', required=True),\n    Field('description_short', 'text'),\n    Field('description_long', 'text'),\n    Field('unit_price', 'double'),\n    Field('on_sale', 'boolean'),\n    Field('rating', 'double'),\n    Field('image_urls', 'list:string'),\n    Field('in_stock', 'integer'),\n    Field('tax_rate', 'double'),\n    Field('volume', 'list:integer'),\n    Field('weight', 'double'),\n    Field('variant_products', 'list:string'),\n    format='%(name)s'\n)\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/manohar/work/bisineer_store/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/home/manohar/work/bisineer_store/web2py/applications/betastore/models/db.py", line 18, in <module>\n    db = DAL(\'google:datastore+ndb\')\n  File "/home/manohar/work/bisineer_store/web2py/gluon/dal.py", line 8060, in __init__\n    raise RuntimeError("Failure to connect, tried %d times:\\n%s" % (attempts, tb))\nRuntimeError: Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/manohar/work/bisineer_store/web2py/gluon/dal.py", line 8038, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/manohar/work/bisineer_store/web2py/gluon/dal.py", line 700, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/home/manohar/work/bisineer_store/web2py/gluon/dal.py", line 5005, in __init__\n    self.types.update({\'boolean\': ndb.BooleanProperty,\nNameError: global name \'ndb\' is not defined\n\n'
p11
s.