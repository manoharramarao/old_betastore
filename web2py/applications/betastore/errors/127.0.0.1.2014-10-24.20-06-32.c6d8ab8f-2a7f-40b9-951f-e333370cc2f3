(dp1
S'output'
p2
S"<class 'gluon.contrib.simplejson.decoder.JSONDecodeError'> Expecting object: line 1 column 108 (char 108)"
p3
sS'layer'
p4
S'/home/manohar/work/bisineer_store/web2py/applications/betastore/controllers/bisineer_user.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\nimport logging\nimport gluon.contrib.simplejson as json\n\nlogger = logging.getLogger("bisineer_user")\nlogger.setLevel(logging.DEBUG)\n\n# try something like\ndef index(): return dict(message="hello from bisineer_user.py")\n\ndef register():\n    """\n    1. checks if the user already exists\n    2. if it is new user, then saves data to DB\n    input json - \n    {\n        "first_name": "Manohar\'",\n        "last_name": "Sangeetham Ramarao",\n        "email_id": "manohar@gmail.com",\n        "phone_number": \'99-00-99-5840",\n        "password": "test1234"\n    }\n    output jsons - \n    {\'result\': \'success\', \'message\': \'user registered successfully\'}\n    or\n    {\'result\': \'failure\', \'message\': \'user registration failed\'}\n    """\n    # read post body\n    print "inside register"\n    result={}\n    response.headers[\'Access-Control-Allow-Headers\'] = [\'Content-Type\']\n    json_string = request.body.read()\n    logger.debug("raw json si " + request.body.read())\n    user = json.loads(json_string)\n    validate_user_result = validate_user(user)\n    logger.debug("user validation result " + str(validate_user_result))\n    if validate_user_result[\'result\'] == "success":\n        # encrypt password if validation passed\n        my_crypt = CRYPT(key=auth.settings.hmac_key)\n        user[\'password\'] = my_crypt(user[\'password\'])[0]\n        user.pop(\'repeat_password\')\n        # insert into db if validation passed\n        result = db.auth_user.insert(**user)\n        print result\n    else:\n        result = validate_user_result\n        print result\n    return result\n\ndef validate_user(user):\n    """\n    1. checks if user already exists\n    2. checks if passwords match\n    """\n    result={"result": "success"}\n    row = db(db.auth_user.phone_number==user[\'phone_number\']).select()\n    if bool(row):\n        result = {"result":"failure", "error_msg":"user already exists"}\n    \n    if user[\'password\'] != user[\'repeat_password\']:\n        result = {"result":"failure", "error_msg":"\xe0\xb2\xaa\xe0\xb2\xbe\xe0\xb2\xb8\xe0\xb3\x8d\xe0\xb2\xb5\xe0\xb2\xb0\xe0\xb3\x8d\xe0\xb2\xa1\xe0\xb3\x8d\xe0\xb2\x97\xe0\xb2\xb3\xe0\xb3\x81 \xe0\xb2\xb9\xe0\xb3\x86\xe0\xb3\x82\xe0\xb2\x82\xe0\xb2\xa6\xe0\xb2\xbf\xe0\xb2\x95\xe0\xb3\x86\xe0\xb2\xaf\xe0\xb2\xbe\xe0\xb2\x97\xe0\xb3\x81\xe0\xb2\xa4\xe0\xb3\x8d\xe0\xb2\xa4\xe0\xb2\xbf\xe0\xb2\xb2\xe0\xb3\x8d\xe0\xb2\xb2"}\n    return result\n\nresponse._vars=response._caller(register)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/manohar/work/bisineer_store/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/home/manohar/work/bisineer_store/web2py/applications/betastore/controllers/bisineer_user.py", line 65, in <module>\n  File "/home/manohar/work/bisineer_store/web2py/gluon/globals.py", line 392, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/manohar/work/bisineer_store/web2py/applications/betastore/controllers/bisineer_user.py", line 35, in register\n    user = json.loads(json_string)\n  File "/home/manohar/work/bisineer_store/web2py/gluon/contrib/simplejson/__init__.py", line 386, in loads\n    return _default_decoder.decode(s)\n  File "/home/manohar/work/bisineer_store/web2py/gluon/contrib/simplejson/decoder.py", line 403, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File "/home/manohar/work/bisineer_store/web2py/gluon/contrib/simplejson/decoder.py", line 419, in raw_decode\n    obj, end = self.scan_once(s, idx)\n  File "/home/manohar/work/bisineer_store/web2py/gluon/contrib/simplejson/scanner.py", line 72, in scan_once\n    return _scan_once(string, idx)\n  File "/home/manohar/work/bisineer_store/web2py/gluon/contrib/simplejson/scanner.py", line 43, in _scan_once\n    _scan_once, object_hook, object_pairs_hook, memo)\n  File "/home/manohar/work/bisineer_store/web2py/gluon/contrib/simplejson/decoder.py", line 233, in JSONObject\n    raise JSONDecodeError("Expecting object", s, end)\nJSONDecodeError: Expecting object: line 1 column 108 (char 108)\n'
p11
s.